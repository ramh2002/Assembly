##
## Instrucoes:
## Abra o Bitmap Display
## Configuracoes do Bitmap:
## Unit Width in Pixels : 1
## Unit Height in Pixels: 1
## Display Width in Pixels: 256
## Display Height in Pixels: 256
## Base address for display: 0x10010000(static data)
##
## OBS:
## Player 1: X
## Player 2: O


##### The positions reported by the players will be interpreted as follows on the board:
##### 7 | 8 | 9
##### 4 | 5 | 6
##### 1 | 2 | 3



###The following data was saved in kdata to avoid conflict with the .data positions that were used to design the interface

.kdata 
	values: .word 0, 0, 0, 0, 0, 0, 0, 0, 0 #Values of moves (1 = x, 2 = 0)
	description: .asciiz "The first player to form a diagonal, vertical or horizontal streak wins.\n"	
	Inform_Position: .asciiz "Enter a position [1 - 9]:"	
	positionInvalid_Msg: .asciiz "Invalid position!\n"
	Player1_msg: .asciiz "Enter a player position 1: "
	Player2_msg: .asciiz "Enter a player position 2: "
	endgame_msg: .asciiz "Gave Old!\n"
	Player1Won_msg: .asciiz "Player 1 won!\n"
	Player2Won_msg: .asciiz "Player 2 won!\n"
	play_again_msg: .asciiz "Do you want to play again? \n"
	
.text
.globl main
main:

	#Carries essential values
	la $s0, values #ADDRESS OF VALUES
	li $s1, 1 #MATCH Counter

	#Displays initial message
	li $v0, 4
	la $a0, description
	syscall
	
	#Load tray
	jal print_table
	nop
	
play_player1:
	#Ask player1 for the move
	li $v0, 4
	la $a0, Player1_msg
	syscall
	
	#Read player's turn 1
	li $v0, 5
	syscall
	move $a0, $v0
	#Save the move at s2
	move $s2, $v0
	
	#Jumps to check if move is valid
	jal check_valid_play 
	nop
	beq $v0, 1 , play_has_been_validated
	nop
	#If the move is not valid it displays a message and reads it again
	li $v0, 4
	la $a0, positionInvalid_Msg
	syscall
	j play_player1
	nop
	#If the move was valid it records the move in memory and draws it in the bitmap
play_has_been_validated:
	li $a0, 1
	jal register_played
	nop
	move $a2, $s2 #Moves to a2 the position to be drawn in the bitmap 
	jal draw_xis
	nop

##### GAME BEGAN Player1#####
	li $v1, 0
	#Jump to check if he won
	jal check_player1_won
	nop
	beq $v1, 1, end
	nop
	#Jump to check if moves > 9
	jal check_end_of_moves
	nop
	beq $v1, 1, end
	nop

#############################
play_player2:
	#Question to player2
	li $v0, 4
	la $a0, Player2_msg
	syscall
	
	#Read player2's move 
	li $v0, 5
	syscall
	move $a0, $v0
	move $s3, $v0 #Save in post the move in s3 
	jal check_valid_play
	nop
	beq $v0, 1, play_has_been_validated2
	nop
	li $v0, 4
	la $a0, positionInvalid_Msg
	syscall
	j play_player2
	nop
	
play_has_been_validated2:
	li $a0, 2
	jal register_played
	nop
	move $a2, $s3
	jal draw_y
	nop
	
##### SECOND PART #######
	li $v1, 0

	jal check_player2_won
	nop
	beq $v1, 1, end
	nop

	jal check_end_of_moves
	nop
	beq $v1, 1, end
	nop
	
	j play_player1
	nop	
	
#### GAME BEGAN from Player1 ####	
			
end:
	li $v0, 50
	la $a0, play_again_msg
	syscall
	
	beq $a0, 0, reset
	nop

	li $v0, 10
	syscall
				
					
						
							
									
##############  #######################################################	
print_table:
# PASSING THE DESIRED COLOR IN HEXADECIMAL
li $t1, 0x00FF00
#Initial address where it will be drawn
lui $t0, 0x1001
#1024 x 80 equals the vertical distance from the beginning of the bitmap and where the first pixel will be drawn
li $t5, 1024
li $t6, 80
mult $t5, $t6
mflo $t6
#VERTICAL
add $t0, $t0, $t6
#HORIZONTAL
#The sum of the initial address with 56 means increasing the horizontal distance by 56 pixels
addi $t0, $t0, 56
# contador
li $t2, 0
first_horizontal_line:
	#COLOR STORE AT THE DESIRED ADDRESS
	sw $t1, 0($t0)
	# INCREASING BY 4 IN 4 TO GO RIGHT 
	addi $t0, $t0, 4
	# INCRIMENT COUNTER
	addi $t2, $t2, 1
	bne $t2, 224, first_horizontal_line
	nop
	
#Changes the position to the second line
lui $t0, 0x1001
li $t5, 1024
li $t6, 150
mult $t5, $t6
mflo $t6
#VERTICAL
add $t0, $t0, $t6
#Horizontal
addi $t0, $t0, 56
li $t2, 0
second_horizontal_line:
	sw $t1, 0($t0)
	addi $t0, $t0, 4
	addi $t2, $t2, 1
	bne $t2, 224, second_horizontal_line
	nop
#Draw vertical lines
lui $t0, 0x1001
li $t6, 10
mult $t5, $t6
mflo $t6
#VERTICAL
add $t0, $t0, $t6
#HORIZONTAL
addi $t0, $t0, 320
li $t2, 0
first_vertical_line:
	addi $t0, $t0, 1024
	sw $t1, 0($t0)
	addi $t2, $t2, 1
	bne $t2, 200, first_vertical_line
	nop
	
lui $t0, 0x1001
#HORIZONTAL
addi $t0, $t0, 660
li $t2, 0
#vertical
li $t6, 10
mult $t5, $t6
mflo $t6
add $t0, $t0, $t6
second_vertical_line:
	addi $t0, $t0, 1024
	sw $t1, 0($t0)
	addi $t2, $t2, 1
	bne $t2, 200, second_vertical_line
	nop


	jr $ra
	nop

#########################################################################################




#################### CHECK VALID PLAY ############################

check_valid_play:
	#Check if number is >= 1
	move $t0, $a0
	bge $t0, 1, validade_1
	nop
	j invalid_play
	nop

	#Check if number is <= 9	
validade_1:
	ble $t0, 9, validade_2
	nop
	j invalid_play
	nop
	
validade_2:
	# Check if field has already been filled 
	subu $t1, $t0, 1
	li $t2, 4 #word size
	mult $t1, $t2
	mflo $t3
	la $t4, values
	add $t4, $t4, $t3
	lw $t5, 0($t4) # $t5 Loads the memory value for the position selected by the player
	beq $t5, $0, valid_play #If the field in memory is 0, the move is valid
	nop
	j invalid_play
	nop
	
	#If the play is invalid it returns 0
invalid_play:	
	li $v0, 0
	jr $ra
	nop
	#If the play is valid it returns 1
valid_play:
	li $v0, 1
	jr $ra
	nop
	
###################################################################################



####################### VALIDATED PLAY ############################################
register_played:
	#Se a0 = 1 move made by player1, se a0 = 2 move made by player2
	beq $a0, 1, move_made_by_player1
	nop
	beq $a0, 2, move_made_by_player2
	nop

move_made_by_player1:
	addi $s1, $s1, 1 #Increment counter
	la $t0, values
	li $t1, 1
	li $t2, 4
	move $t3, $s2
	subu $t3, $t3, 1
	mult $t3, $t2
	mflo $t4
	add $t0, $t0, $t4
	sw $t1, 0($t0)
	jr $ra
	nop
	
move_made_by_player2:
	addi $s1, $s1, 1 #Increment counter
	la $t0, values
	li $t1, 2
	li $t2, 4
	move $t3, $s3
	subu $t3, $t3, 1
	mult $t3, $t2
	mflo $t4
	add $t0, $t0, $t4
	sw $t1, 0($t0)
	jr $ra
	nop
	
######################################################################################

############# CHECK END OF MATCHES  #################################################
check_end_of_moves:	
	li $t0, 10
	beq $s1, $t0, game_end
	nop
	
	li $v1, 0
	jr $ra
	nop
	
game_end:

	li $v0, 4
	la $a0, endgame_msg
	syscall
	
	li $v1, 1
	jr $ra
	nop
	
#####################################################################################


################# CHECK PLAYER 1 WON ##########################################
# If a sequence of 1,1,1 is found in the memory for a horizontal, vertical or diagonal line, then player1 won
check_player1_won:
	la $t0, values
	lw $t1, 0($t0)
	lw $t2, 4($t0)
	lw $t3, 8($t0)
	

first_player_attempt1:
	beq $t1, 1, player1_valid1
	nop
	j second_attempt
	nop
player1_valid1:
	beq $t2, 1, player1_valid2
	nop
	j second_attempt
	nop
player1_valid2:
	beq $t3, 1, player1_won
	nop
	j second_attempt
	nop
second_attempt:
	lw $t1, 12($t0)
	lw $t2, 16($t0)
	lw $t3, 20($t0)
	beq $t1, 1, player1_valid1_Mon
	nop
	j third_try
	nop
player1_valid1_Mon:
	beq $t2, 1, player1_valid2_Mon
	nop
	j third_try
	nop
player1_valid2_Mon:
	beq $t3, 1, player1_won
	nop
	j third_try
	nop
third_try:
	lw $t1, 24($t0)
	lw $t2, 28($t0)
	lw $t3, 32($t0)
	beq $t1, 1, player1_valid1_third
	nop
	j fourth_attempt
	nop
player1_valid1_third:
	beq $t2, 1, player1_valid2_third
	nop
	j fourth_attempt
	nop
player1_valid2_third:
	beq $t3, 1, player1_won
	nop
	j fourth_attempt
	nop
fourth_attempt: 
	lw $t1, 0($t0)
	lw $t2, 12($t0)
	lw $t3, 24($t0)
	beq $t1, 1, player1_valid1_quater
	nop
	j fifth_attempt
	nop
player1_valid1_quater:
	beq $t2, 1, player1_valid2_quater
	nop
	j fifth_attempt
	nop
player1_valid2_quater:
	beq $t3, 1, player1_won
	nop
	j fifth_attempt
	nop
fifth_attempt:
	lw $t1, 4($t0)
	lw $t2, 16($t0)
	lw $t3, 28($t0)
	beq $t1, 1, player1_valid1_attempt
	nop
	j sixth_attempt
	nop
player1_valid1_attempt:
	beq $t2, 1, player1_valid2_attempt
	nop
	j sixth_attempt
	nop
player1_valid2_attempt:
	beq $t3, 1, player1_won
	nop
	j sixth_attempt
	nop
sixth_attempt:
	lw $t1, 8($t0)
	lw $t2, 20($t0)
	lw $t3, 32($t0)
	beq $t1, 1, player1_valid1_sixth
	nop
	j seventh_attempt
	nop
player1_valid1_sixth:
	beq $t2, 1, player1_valid2_sixth
	nop
	j seventh_attempt
	nop
player1_valid2_sixth:
	beq $t3, 1, player1_won
	nop
	j seventh_attempt
	nop
seventh_attempt: 
	lw $t1, 0($t0)
	lw $t2, 16($t0)
	lw $t3, 32($t0)
	beq $t1, 1, player1_valid1_seventh
	nop
	j Eight_attempt
	nop
player1_valid1_seventh:
	beq $t2, 1, player1_valid2_seventh
	nop
	j Eight_attempt
	nop
player1_valid2_seventh:
	beq $t3, 1, player1_won
	nop
	j Eight_attempt
	nop
Eight_attempt:
	lw $t1, 8($t0)
	lw $t2, 16($t0)
	lw $t3, 24($t0)
	beq $t1, 1, player1_valid1_eight
	nop
	j player1_not_won
	nop
player1_valid1_eight:
	beq $t2, 1, player1_valid2_eight
	nop
	j player1_not_won
	nop
player1_valid2_eight:
	beq $t3, 1, player1_won
	nop
	j player1_not_won
	nop
player1_not_won:
	li $v1, 0
	jr $ra
	nop
player1_won:
	li $a1, 1
	li $v0, 55
	la $a0, Player1Won_msg
	syscall

	li $v1, 1
	jr $ra
	nop
	
####################################################################################


############### CHECK PLAYER 2 WON ############################################
#If a sequence of 1,1,1 is found in the memory for a horizontal, vertical or diagonal line, then player2 has won
check_player2_won:
	la $t0, values
	lw $t1, 0($t0)
	lw $t2, 4($t0)
	lw $t3, 8($t0)
	
primeira_tentativa_jogador2:
	beq $t1, 2, Player2_valid
	nop
	j second_attempt_j2
	nop
Player2_valid:
	beq $t2, 2, Player2_valid2
	nop
	j second_attempt_j2
	nop
Player2_valid2:
	beq $t3, 2, player2_won
	nop
	j second_attempt_j2
	nop
second_attempt_j2:
	lw $t1, 12($t0)
	lw $t2, 16($t0)
	lw $t3, 20($t0)
	beq $t1, 2, Player2_valid1_Mon
	nop
	j third_try_j2
	nop
Player2_valid1_Mon:
	beq $t2, 2, Player2_valid2_Mon
	nop
	j third_try_j2
	nop
Player2_valid2_Mon:
	beq $t3, 2, player2_won
	nop
	j third_try_j2
	nop
third_try_j2:
	lw $t1, 24($t0)
	lw $t2, 28($t0)
	lw $t3, 32($t0)
	beq $t1, 2, Player2_valid1_third
	nop
	j fourth_attempt_j2
	nop
Player2_valid1_third:
	beq $t2, 2, Player2_valid2_third
	nop
	j fourth_attempt_j2
	nop
Player2_valid2_third:
	beq $t3, 2, player2_won
	nop
	j fourth_attempt_j2
	nop
fourth_attempt_j2:
	lw $t1, 0($t0)
	lw $t2, 12($t0)
	lw $t3, 24($t0)
	beq $t1, 2, Player2_valid1_fourth
	nop
	j fifth_attempt_j2
	nop
Player2_valid1_fourth:
	beq $t2, 2, Player2_valid2_fourth
	nop
	j fifth_attempt_j2
	nop
Player2_valid2_fourth:
	beq $t3, 2, player2_won
	nop
	j fifth_attempt_j2
	nop
fifth_attempt_j2:
	lw $t1, 4($t0)
	lw $t2, 16($t0)
	lw $t3, 28($t0)
	beq $t1, 2, Player2_valid1_fifth
	nop
	j sixth_attempt_j2
	nop
Player2_valid1_fifth:
	beq $t2, 2, Player2_valid2_fifth
	nop
	j sixth_attempt_j2
	nop
Player2_valid2_fifth:
	beq $t3, 2, player2_won
	nop
	j sixth_attempt_j2
	nop
sixth_attempt_j2:
	lw $t1, 8($t0)
	lw $t2, 20($t0)
	lw $t3, 32($t0)
	beq $t1, 2, Player2_valid1_sixth
	nop
	j seventh_attempt_j2
	nop
Player2_valid1_sixth:
	beq $t2, 2, Player2_valid2_sixth
	nop
	j seventh_attempt_j2
	nop
Player2_valid2_sixth:
	beq $t3, 2, player2_won
	nop
	j seventh_attempt_j2
	nop
seventh_attempt_j2:
	lw $t1, 0($t0)
	lw $t2, 16($t0)
	lw $t3, 32($t0)
	beq $t1, 2, Player2_valid1_seventh
	nop
	j Eight_attempt_j2
	nop
Player2_valid1_seventh:
	beq $t2, 2, Player2_valid2_seventh
	nop
	j Eight_attempt_j2
	nop
Player2_valid2_seventh:
	beq $t3, 2, player2_won
	nop
	j Eight_attempt_j2
	nop
Eight_attempt_j2:
	lw $t1, 8($t0)
	lw $t2, 16($t0)
	lw $t3, 24($t0)
	beq $t1, 2, Player2_valid1_eight
	nop
	j player2_not_won
	nop
Player2_valid1_eight:
	beq $t2, 2, Player2_valid2_eight
	nop
	j player2_not_won
	nop
Player2_valid2_eight:
	beq $t3, 2, player2_won
	nop
	j player2_not_won
	nop
player2_not_won:
	li $v1, 0
	jr $ra
	nop
player2_won:
	li $a1, 1
	li $v0, 55
	la $a0, Player2Won_msg
	syscall
	li $v1, 1
	jr $ra
	nop
###################################################################################



######### DRAWING X ####################
draw_xis:

	li $t1, 0x00FF00
	lui $t0, 0x1001
	ori $t2, $0, 0

##### The positions reported by the players will be interpreted as follows on the board:
##### 7 | 8 | 9
##### 4 | 5 | 6
##### 1 | 2 | 3

beq $a2, 1, xis_seven
nop

beq $a2, 2, xis_eight
nop

beq $a2, 3, xis_nine
nop

beq $a2, 4, xis_four
nop

beq $a2, 5, xis_five
nop

beq $a2, 6, xis_six
nop

beq $a2, 7, xis_one
nop

beq $a2, 8, xis_two
nop

beq $a2, 9, xis_three
nop

xis_one:	
	#VERTICAL
	li $t3, 30
	li $t4, 1024
	mult $t3, $t4
	mflo $t5
	add $t0, $t0, $t5
	#HORIZONTAL
	addi $t0, $t0, 140
	j first_line
	nop
	
xis_two:
	#VERTICAL
	li $t3, 30
	li $t4, 1024
	mult $t3, $t4
	mflo $t5
	add $t0, $t0, $t5
	#HORIZONTAL
	addi $t0, $t0, 440	
	j first_line
	nop	
xis_three:
	#VERTICAL
	li $t3, 30
	li $t4, 1024
	mult $t3, $t4
	mflo $t5
	add $t0, $t0, $t5
	#HORIZONTAL
	add $t0, $t0, 760
	j first_line
	nop	
xis_four:
	#VERTICAL
	li $t3, 100
	li $t4, 1024
	mult $t3, $t4
	mflo $t5
	add $t0, $t0, $t5
	#HORIZONTAL
	add $t0, $t0, 140	
	j first_line
	nop
xis_five:
	#VERTICAL
	li $t3, 100
	li $t4, 1024
	mult $t3, $t4
	mflo $t5
	add $t0, $t0, $t5
	#HORIZONTAL
	add $t0, $t0, 440
	j first_line
	nop
xis_six:
	#VERTICAL
	li $t3, 100
	li $t4, 1024
	mult $t3, $t4
	mflo $t5
	add $t0, $t0, $t5
	#HORIZONTAL
	add $t0, $t0, 760
	j first_line
	nop	
xis_seven:
	#VERTICAL
	li $t3, 170
	li $t4, 1024
	mult $t3, $t4
	mflo $t5
	add $t0, $t0, $t5
	#HORIZONTAL
	addi $t0, $t0, 140
	j first_line
	nop
xis_eight:
	#VERTICAL
	li $t3, 170
	li $t4, 1024
	mult $t3, $t4
	mflo $t5
	add $t0, $t0, $t5
	#HORIZONTAL
	add $t0, $t0, 440
	j first_line
	nop
xis_nine:
	#VERTICAL
	li $t3, 170
	li $t4, 1024
	mult $t3, $t4
	mflo $t5
	add $t0, $t0, $t5
	#HORIZONTAL
	add $t0, $t0, 760
	j first_line
	nop
	
first_line:
	addi $t0, $t0, 1024
	addi $t0, $t0, 4
	sw $t1, 0($t0)
	addi $t2, $t2, 1
	bne $t2, 30, first_line
	nop
	subu $t0, $t0, 120
	ori $t2, $0, 0
second_line:
	sub $t0, $t0, 1024
	addi $t0, $t0, 4
	sw $t1, 0($t0)
	addi $t2, $t2, 1	
	bne $t2, 30, second_line
	nop
	jr $ra
	nop

# - FINISH DRAWING X - #

####### DRAWING 0  ###########
draw_y:
				
	li $t1, 0x00FF00	
	lui $t0, 0x1001
	ori $t2, $0, 0

beq $a2, 1, y_seven
nop

beq $a2, 2, y_eight
nop

beq $a2, 3, y_nine
nop

beq $a2, 4, y_four
nop

beq $a2, 5, y_five
nop

beq $a2, 6, y_six
nop

beq $a2, 7, y_one
nop

beq $a2, 8, y_two
nop

beq $a2, 9, y_three
nop

y_one:
	#HORIZONTAL
	addi $t0, $t0, 120
	#VERTICAL
	li $t3, 30
	li $t4, 1024
	mult $t3, $t4
	mflo $t5
	add $t0, $t0, $t5
	j to_draw_y
	nop

y_two:
	#HORIZONTAL
	addi $t0, $t0, 420
	#VERTICAL
	li $t3, 30
	li $t4, 1024
	mult $t3, $t4
	mflo $t5
	add $t0, $t0, $t5
	j to_draw_y
	nop
y_three:
	#HORIZONTAL
	addi $t0, $t0, 740
	#VERTICAL
	li $t3, 30
	li $t4, 1024
	mult $t3, $t4
	mflo $t5
	add $t0, $t0, $t5
	j to_draw_y
	nop
y_four:
	#HORIZONTAL
	addi $t0, $t0, 120
	#VERTICAL
	li $t3, 100
	li $t4, 1024
	mult $t3, $t4
	mflo $t5
	add $t0, $t0, $t5
	j to_draw_y
	nop
y_five:
	#HORIZONTAL
	addi $t0, $t0, 420
	#VERTICAL
	li $t3, 100
	li $t4, 1024
	mult $t3, $t4
	mflo $t5
	add $t0, $t0, $t5
	j to_draw_y
	nop
y_six:
	#HORIZONTAL
	addi $t0, $t0, 740
	#VERTICAL	
	li $t3, 100
	li $t4, 1024
	mult $t3, $t4
	mflo $t5
	add $t0, $t0, $t5
	j to_draw_y
	nop
y_seven:
	#HORIZONTAL
	addi $t0, $t0, 120
	#VERTICAL
	li $t3, 170
	li $t4, 1024
	mult $t3, $t4
	mflo $t5
	add $t0, $t0, $t5
	j to_draw_y
	nop
y_eight:
	#HORIZONTAL
	addi $t0, $t0, 420
	#VERTICAL
	li $t3, 170
	li $t4, 1024
	mult $t3, $t4
	mflo $t5
	add $t0, $t0, $t5
	j to_draw_y
	nop
y_nine:
	#HORIZONTAL
	addi $t0, $t0, 740
	#VERTICAL
	li $t3, 170
	li $t4, 1024
	mult $t3, $t4
	mflo $t5
	add $t0, $t0, $t5
	j to_draw_y
	nop
	
to_draw_y:	
	second_part:
		addi $t0, $t0, 108
		addi $t0, $t0, 30720
		li $t2, 0
	second_line_h:
		sw $t1, 0($t0)
		subu $t0, $t0, 4
		addi $t2, $t2, 1
		bne $t2, 15, second_line_h
		nop
	third_part:
		ori $t2, $0, 0
	first_diagonal:
		sw $t1, 0($t0)
		subu $t0, $t0, 1024
		sub $t0, $t0, 4
		addi $t2, $t2, 1
		bne $t2, 9, first_diagonal
		nop
	fourth_part:
		ori $t2, $0, 0
	first_line_h:
		sw $t1, 0($t0)	
		subu $t0, $t0, 1024
		addi $t2, $t2, 1
		bne $t2, 15, first_line_h
		nop
	quinta_parte:
		ori $t2, $0, 0
	second_diagonal:
		sw $t1, 0($t0)
		addi $t0, $t0, 4
		subu $t0, $t0, 1024
		addi $t2, $t2, 1
		bne $t2, 9, second_diagonal
		nop
	sexta_parte:
		ori $t2, $0, 0
	
second_line_v:
		sw $t1, 0($t0)
		addi $t0, $t0, 4
		addi $t2, $t2, 1
		bne $t2, 15, second_line_v
		nop
	part_seven:
		ori $t2, $0, 0	
	third_diagonal :
		sw $t1, 0($t0)
		addi $t0, $t0, 4
		addi $t0, $t0, 1024
		addi $t2, $t2, 1
		bne $t2, 9, third_diagonal
		nop	
	eighth_part :
		ori $t2, $0, 0
	second_vertical :
		sw $t1, 0($t0)
		addi $t0, $t0, 1024
		addi $t2, $t2, 1
		bne $t2, 15, second_vertical 
		nop	
ninth_part:
		ori $t2, $0, 0
	
fourth_diagonal:
		sw $t1, 0($t0)
		addi $t0, $t0, 1024
		subu $t0, $t0, 4
		addi $t2, $t2, 1
		bne $t2, 9, fourth_diagonal
		nop
		
		jr $ra
		nop
		
######### END DRAWING Y #################

######### RESET MEMORY AND SCREEN ###########
reset:
	li $s1, 1
	la $t0, values
	sw $0, 0($t0)
	sw $0, 4($t0)
	sw $0, 8($t0)
	sw $0, 12($t0)
	sw $0, 16($t0)
	sw $0, 20($t0)
	sw $0, 24($t0)
	sw $0, 28($t0)
	sw $0, 32($t0)
	
	lui $t1, 0x1001
	li $t2, 0
	
#Paint everything black
loop:
	sw $0, ($t1)
	addi $t1, $t1, 4
	addi $t2, $t2, 1
	bne $t2, 65536, loop
	nop
	
	j main
	nop
	
